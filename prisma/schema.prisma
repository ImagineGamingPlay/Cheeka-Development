// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Config {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  repLeaderboardMsgId String?
  thanksTrigger       Trigger?
}

model Trigger {
  name                String   @unique
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  stringMatch         String[] @default([])
  regexMatch          String[] @default([])
  replyMessageContent String
  config              Config   @relation(fields: [configId], references: [id])
  configId            String   @unique @db.ObjectId
}

// - user
model User {
  id          String       @id @default(cuid()) @map("_id")
  userId      String       @unique @map("userId")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  punishments Punishment[]
  Reputation  Reputation?
}

model Punishment {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  type   PunishmentType
  reason String
  User   User?          @relation(fields: [userId], references: [id])
  userId String?
}

enum PunishmentType {
  TIMEOUT
  WARN
  KICK
  SOFTBAN
  BAN
}

// TAG SYSTEM {{
model Tag {
  id         String   @id @default(cuid()) @map("_id")
  name       String   @unique
  type       TagType
  accepted   Boolean  @default(false)
  content    String
  newContent String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ownerId    String
  // owner      User?    @relation(fields: [ownerId], references: [id])
}

enum TagType {
  RULE
  CODE
  INFO
}

// }}

model PromotionBlacklist {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @unique
  indexData IndexData[]
}

model IndexData {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  channelId          String
  index              Int
  PromotionBlacklist PromotionBlacklist @relation(fields: [userId], references: [userId])
  userId             String

  @@unique([userId, channelId])
}

model Reputation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  count  Int
  user   User   @relation(fields: [userId], references: [userId])
  userId String @unique
}
